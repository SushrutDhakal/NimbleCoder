#include <iostream>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include "Utils.h"

using namespace std;

const char * INPUT_ERROR_STRING = "Input error! Please try again.";

enum
{
	AIRCRAFT_CARRIER_SIZE = 5,
	BATTLESHIP_SIZE = 4,
	CRUISER_SIZE = 3,
	DESTROYER_SIZE = 3,
	SUBMARINE_SIZE = 2,

	BOARD_SIZE = 10,
	NUM_SHIPS = 5,
	PLAYER_NAME_SIZE = 8, 
	MAX_SHIP_SIZE = AIRCRAFT_CARRIER_SIZE
};

enum ShipType
{
	ST_NONE = 0,
	ST_AIRCRAFT_CARRIER,
	ST_BATTLESHIP,
	ST_CRUISER,
	ST_DESTROYER,
	ST_SUBMARINE
};

enum ShipOrientationType
{
	SO_HORIZONTAL = 0,
	SO_VERTICAL
};

struct posType
{
	int row;
	int col;
};

struct Ship
{
	ShipType shipType;
	int shipSize;
	ShipOrientationType orientation;
	posType position;
};

enum GuessType
{
	GT_NONE = 0,
	GT_MISSED,
	GT_HIT
};

struct ShipPartType
{
	ShipType shipType;
	bool isHit;
};

enum PlayerType
{
	PT_HUMAN = 0,
	PT_AI
};

struct Player
{
	PlayerType playerType;
	char playerName[PLAYER_NAME_SIZE];
	Ship ships[NUM_SHIPS];
	GuessType guessBoard[BOARD_SIZE][BOARD_SIZE];
	ShipPartType shipBoard[BOARD_SIZE][BOARD_SIZE];
};

void drawPlayer(Player & player, const char * playerName);

void intialShip(Ship& ship, int shipSize, ShipType shipType);

void PlayGame(Player& player1, Player& player2);

bool playAgain();

void boardsSetup(Player& player);

void boardsClear(Player& player);

void  drawBoard(const Player& player);

void divideLine();
void drawColumnsRows();
void shipBoardRow(const Player& player, int row);
void guessBoardRow(const Player& player, int row);
char GetGuessRepresentationAt(const Player& player, int row, int col);
char GetShipRepresentationAt(const Player& player, int row, int col);

const char * shipNameType(ShipType shipType);
posType getBoardPos();
ShipOrientationType shipRotation();

bool validPlace(const Player& player, const Ship& currentShip,const posType& shipPosition, ShipOrientationType orientation);

void shipOnBoard(Player& player, Ship& currentShip, const posType& shipPosition, ShipOrientationType orientation);

ShipType UpdateBoards(posType guess, Player& currentPlayer, Player& otherPlayer);

bool gameOver(const Player& player1, const Player& player2);

bool shipsSunk(const Player& player);

bool isSunk(const Player& player, const Ship& ship);

void playerSwitch(Player ** currentPlayer, Player ** otherPlayer);

void displayWinner(const Player& player1, const Player& player2);


PlayerType GetPlayer2Type();

posType AIGuess(const Player& aiPlayer);


void AIBoard(Player & player);

int main()
{

	srand(time(NULL));

	Player player1;
	Player player2;

	drawPlayer(player1, "Player1");
	drawPlayer(player2, "Player2");

	do
	{
		PlayGame(player1, player2);

	}while(playAgain());

	return 0;
}


void drawPlayer(Player & player, const char * playerName)
{
	if(playerName != nullptr && strlen(playerName) > 0)
	{
		strcpy(player.playerName, playerName);
	}

	intialShip(player.ships[0], AIRCRAFT_CARRIER_SIZE, ST_AIRCRAFT_CARRIER);

	intialShip(player.ships[1], BATTLESHIP_SIZE, ST_BATTLESHIP);

	intialShip(player.ships[2], CRUISER_SIZE, ST_CRUISER);

	intialShip(player.ships[3], DESTROYER_SIZE, ST_DESTROYER);

	intialShip(player.ships[4], SUBMARINE_SIZE, ST_SUBMARINE);
}


void intialShip(Ship& ship, int shipSize, ShipType shipType)
{
	ship.shipType = shipType;
	ship.shipSize = shipSize;
	ship.position.row = 0;
	ship.position.col = 0;
	ship.orientation = SO_HORIZONTAL;
}

void PlayGame(Player& player1, Player& player2)
{

	ClearScreen();
	player1.playerType = PT_HUMAN;
	player2.playerType = GetPlayer2Type();

	boardsSetup(player1);
	boardsSetup(player2);

	Player * currentPlayer = &player1;
	Player * otherPlayer = &player2;

	posType guess;

	do
	{
		if(currentPlayer->playerType == PT_HUMAN)
		{
			drawBoard(*currentPlayer);
		}

		bool isValidGuess;

		do
		{
			if(currentPlayer->playerType == PT_HUMAN)
			{
				cout << currentPlayer->playerName << " what is your guess? " << endl;

				guess = getBoardPos();
			}
			else
			{
				guess = AIGuess(*currentPlayer);
			}

			isValidGuess = currentPlayer->guessBoard[guess.row][guess.col] == GT_NONE;

			if(!isValidGuess && currentPlayer->playerType == PT_HUMAN)
			{
				cout << "That was not a valid guess! Please try again." << endl;
			}


		}while(!isValidGuess);

		ShipType type = UpdateBoards(guess, *currentPlayer, *otherPlayer);


		if(currentPlayer->playerType == PT_AI)
		{
			drawBoard(*otherPlayer);
			cout << currentPlayer->playerName << " chose row " << char(guess.row + 'A') << " and column " << guess.col + 1 << endl;
		}
		else
		{
			drawBoard(*currentPlayer);
		}

		if(type != ST_NONE && isSunk(*otherPlayer, otherPlayer->ships[type-1]))
		{
			if(currentPlayer->playerType == PT_AI)
			{
				cout << currentPlayer->playerName << " sunk your " << shipNameType(type) << "!" << endl;
			}
			else
			{
				cout << "You sunk " << otherPlayer->playerName << "'s " << shipNameType(type) << "!" << endl;

			}
		}

		WaitForKeyPress();

		playerSwitch(&currentPlayer, &otherPlayer);


	}while(!gameOver(player1, player2));

	displayWinner(player1, player2);
}

ShipType UpdateBoards(posType guess, Player& currentPlayer, Player& otherPlayer)
{
	if(otherPlayer.shipBoard[guess.row][guess.col].shipType != ST_NONE)
	{
		//hit
		currentPlayer.guessBoard[guess.row][guess.col] = GT_HIT;
		otherPlayer.shipBoard[guess.row][guess.col].isHit = true;
	}
	else
	{
		currentPlayer.guessBoard[guess.row][guess.col] = GT_MISSED;
	}

	return otherPlayer.shipBoard[guess.row][guess.col].shipType;
}


void playerSwitch(Player ** currentPlayer, Player ** otherPlayer)
{
	Player * temp = *currentPlayer;
	*currentPlayer = *otherPlayer;
	*otherPlayer = temp;
}



void displayWinner(const Player& player1, const Player& player2)
{
	if(shipsSunk(player1))
	{
		cout << "Congratulations " << player2.playerName << "! You won!" << endl;
	}
	else
	{
		cout << "Congratulations " << player1.playerName << "! You won!" << endl;
	}
}

bool isSunk(const Player& player, const Ship& ship)
{
	if(ship.orientation == SO_HORIZONTAL)
	{
		for(int col = ship.position.col; col < (ship.position.col + ship.shipSize); col++)
		{
			if(!player.shipBoard[ship.position.row][col].isHit)
			{
				return false;
			}
		}
	}
	else
	{
		for(int row = ship.position.row; row < (ship.position.row + ship.shipSize); row++)
		{
			if(!player.shipBoard[row][ship.position.col].isHit)
			{
				return false;
			}
		}
	}

	return true;
}

bool shipsSunk(const Player& player)
{
	for(int i = 0; i < NUM_SHIPS; i++)
	{
		if(!isSunk(player, player.ships[i]))
		{
			return false;
		}
	}

	return true;
}


bool gameOver(const Player& player1, const Player& player2)
{
	return shipsSunk(player1) || shipsSunk(player2);
}


bool playAgain()
{
	char input;

	const char validInput[2] = {'y', 'n'};

	input = GetCharacter("Would you like to play again? (y/n): ", INPUT_ERROR_STRING, validInput, 2, CC_LOWER_CASE);

	return input == 'y';
}

const char * shipNameType(ShipType shipType)
{
	if(shipType == ST_AIRCRAFT_CARRIER)
	{
		return "Aircraft Carrier";
	}
	else if(shipType == ST_BATTLESHIP)
	{
		return "Battleship";
	}
	else if(shipType == ST_CRUISER)
	{
		return "Cruiser";
	}
	else if(shipType == ST_DESTROYER)
	{
		return "Destroyer";
	}
	else if(shipType == ST_SUBMARINE)
	{
		return "Submarine";
	}

	return "None";
}

void boardsSetup(Player& player)
{
	boardsClear(player);

	if(player.playerType == PT_AI)
	{
		AIBoard(player);
		return;
	}

	for(int i = 0; i < NUM_SHIPS; i++)
	{

		drawBoard(player);

		Ship& currentShip = player.ships[i];

		posType shipPosition;
		ShipOrientationType orientation;

		bool validPlace = false;

		do
		{
			cout << player.playerName << " please set the position and orientation for your " << shipNameType(currentShip.shipType) << endl;

			shipPosition = getBoardPos();
			orientation = shipRotation();

			validPlace = validPlace(player, currentShip, shipPosition, orientation);

			if(!validPlace)
			{
				cout << "That was not a valid placement. Please try again." << endl;
				WaitForKeyPress();
			}

		}while(!validPlace);


		shipOnBoard(player, currentShip, shipPosition, orientation);

	}

	drawBoard(player);
	WaitForKeyPress();
}


bool validPlace(const Player& player, const Ship& currentShip,const posType& shipPosition, ShipOrientationType orientation)
{
	if(orientation == SO_HORIZONTAL)
	{
		for(int c = shipPosition.col; c < (shipPosition.col + currentShip.shipSize); c++)
		{
			if(player.shipBoard[shipPosition.row][c].shipType != ST_NONE || c >= BOARD_SIZE)
			{
				return false;
			}
		}
	}
	else
	{
		for(int r = shipPosition.row; r < (shipPosition.row + currentShip.shipSize); r++)
		{
			if(player.shipBoard[r][shipPosition.col].shipType != ST_NONE || r >= BOARD_SIZE)
			{
				return false;
			}
		}
	}
	return true;
}


void shipOnBoard(Player& player, Ship& currentShip, const posType& shipPosition, ShipOrientationType orientation)
{
	currentShip.position = shipPosition;
	currentShip.orientation = orientation;

	if(orientation == SO_HORIZONTAL)
	{
		for(int c = shipPosition.col; c < (shipPosition.col + currentShip.shipSize); c++)
		{
			player.shipBoard[shipPosition.row][c].shipType = currentShip.shipType;
			player.shipBoard[shipPosition.row][c].isHit = false;
		}
	}
	else
	{
		for(int r = shipPosition.row; r < (shipPosition.row + currentShip.shipSize); r++)
		{
			player.shipBoard[r][shipPosition.col].shipType = currentShip.shipType;

			player.shipBoard[r][shipPosition.col].isHit = false;
		}
	}
}

posType mapBoardPos(char rowInput, int colInput)
{
	int realRow = rowInput - 'A';
	int realCol = colInput - 1;

	posType boardPosition;

	boardPosition.row = realRow;
	boardPosition.col = realCol;

	return boardPosition;
}

posType getBoardPos()
{
	char rowInput;
	int colInput;

	const char validRowInputs[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
	const int validColumnInputs[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

	rowInput = GetCharacter("Please input a row (A - J): ", INPUT_ERROR_STRING, validRowInputs, BOARD_SIZE, CC_UPPER_CASE);
	colInput = GetInteger("Please input a column (1 - 10): ", INPUT_ERROR_STRING, validColumnInputs, BOARD_SIZE);

	return getBoardPos(rowInput, colInput);
}

ShipOrientationType shipRotation()
{

	const char validInput[2] = {'H', 'V'};

	char input = GetCharacter("Please choose and orientation (H) for Horizontal or (V) for Vertical: ", INPUT_ERROR_STRING, validInput, 2, CC_UPPER_CASE);

	if(input == validInput[0])
	{
		return SO_HORIZONTAL;
	}
	else
	{
		return SO_VERTICAL;
	}
}

void boardsClear(Player& player)
{
	for(int r = 0; r < BOARD_SIZE; r++)
	{
		for(int c = 0; c < BOARD_SIZE; c++)
		{
			player.guessBoard[r][c] = GT_NONE;
			player.shipBoard[r][c].shipType = ST_NONE;
			player.shipBoard[r][c].isHit = false;
		}
	}
}

void divideLine()
{
	cout << " ";

	for(int c = 0; c < BOARD_SIZE; c++)
	{
		cout << "+---";
	}

	cout << "+";
}

void drawColumnsRows()
{
	cout << "  ";
	for(int c = 0; c < BOARD_SIZE; c++)
	{
		int columnName = c + 1;

		cout << " " << columnName << "  ";
	}
}

char GetShipRepresentationAt(const Player& player, int row, int col)
{
	if(player.shipBoard[row][col].isHit)
	{
		return '*'; //represents hit
	}

	if(player.shipBoard[row][col].shipType == ST_AIRCRAFT_CARRIER)
	{
		return 'A';
	}
	else if(player.shipBoard[row][col].shipType == ST_BATTLESHIP)
	{
		return 'B';
	}
	else if(player.shipBoard[row][col].shipType == ST_CRUISER)
	{
		return 'C';
	}
	else if(player.shipBoard[row][col].shipType == ST_DESTROYER)
	{
		return 'D';
	}
	else if(player.shipBoard[row][col].shipType == ST_SUBMARINE)
	{
		return 'S';
	}
	else
	{
		return ' ';
	}
}

char GetGuessRepresentationAt(const Player& player, int row, int col)
{
	if(player.guessBoard[row][col] == GT_HIT)
	{
		return '*';
	}
	else if(player.guessBoard[row][col] == GT_MISSED)
	{
		return 'o';
	}
	else
	{
		return ' ';
	}
}

void shipBoardRow(const Player& player, int row)
{
	char rowName = row + 'A';
	cout << rowName << "|";

	for(int c = 0; c < BOARD_SIZE; c++)
	{
		cout << " " << GetShipRepresentationAt(player, row, c) << " |";
	}
}

void guessBoardRow(const Player& player, int row)
{
	char rowName = row + 'A';
		cout << rowName << "|";

		for(int c = 0; c < BOARD_SIZE; c++)
		{
			cout << " " << GetGuessRepresentationAt(player, row, c) << " |";
		}
}

void  drawBoard(const Player& player)
{
	ClearScreen();

	drawColumnsRows();

	drawColumnsRows();

	cout << endl;

	for(int r = 0; r < BOARD_SIZE; r++)
	{
		divideLine();

		cout << " ";

		divideLine();

		cout << endl;

		shipBoardRow(player, r);

		cout << " ";

		guessBoardRow(player, r);

		cout << endl;
	}

	divideLine();

	cout << " ";

	divideLine();

	cout << endl;
}


PlayerType GetPlayer2Type()
{
	const int validInputs[2] = {1, 2};


	int input = GetInteger("Who would you like to player against?\n1. Human\n2. AI\n\nWhat is your choice? ", INPUT_ERROR_STRING, validInputs, 2);


	if(input == 1)
	{
		return PT_HUMAN;
	}
	else
	{
		return PT_AI;
	}
}

posType randomPos()
{
	posType guess;

	guess.row = rand() % BOARD_SIZE;
	guess.col = rand() % BOARD_SIZE;

	return guess;
}

posType AIGuess(const Player& aiPlayer)
{
	return randomPos();
}


void AIBoard(Player & player)
{
	posType pos;
	ShipOrientationType orientation;

	for(int i =0; i < NUM_SHIPS; i++)
	{
		Ship& currentShip = player.ships[i];

		do
		{
			pos = randomPos();
			orientation = ShipOrientationType(rand() % 2);



		}while(!validPlace(player, currentShip, pos, orientation));

		shipOnBoard(player, currentShip, pos, orientation);
	}
}

